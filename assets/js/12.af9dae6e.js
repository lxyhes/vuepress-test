(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{536:function(e,t,r){"use strict";r.r(t);var _=r(5),v=Object(_.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"前期面试准备"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前期面试准备"}},[e._v("#")]),e._v(" 前期⾯试准备")]),e._v(" "),r("p",[e._v("算法")]),e._v(" "),r("p",[e._v("基础知识")]),e._v(" "),r("p",[e._v("项⽬经验")]),e._v(" "),r("p",[e._v("场景分析")]),e._v(" "),r("h1",{attrs:{id:"_1-整体流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-整体流程"}},[e._v("#")]),e._v(" 1.整体流程")]),e._v(" "),r("p",[e._v("⼀般三轮技术⾯和⼀轮hr⾯试")]),e._v(" "),r("h2",{attrs:{id:"第一轮"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第一轮"}},[e._v("#")]),e._v(" 第⼀轮：")]),e._v(" "),r("p",[e._v("⼀般是你同事或者⽐你")]),e._v(" "),r("p",[e._v("级别稍微⾼⼀点的。")]),e._v(" "),r("p",[e._v("主要问你⼀些基础或者项⽬。同时会让你写个算法题")]),e._v(" "),r("h2",{attrs:{id:"第二轮"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第二轮"}},[e._v("#")]),e._v(" 第⼆轮：")]),e._v(" "),r("p",[e._v("⼀般就是你后期的leader")]),e._v(" "),r("p",[e._v("会问你⼀些业务场景解决⽅案和项⽬中的经验，也会有⼀部分的基础。")]),e._v(" "),r("p",[e._v("会让你写算法题。")]),e._v(" "),r("p",[e._v("各种解决⽅案。（偏技术）")]),e._v(" "),r("h2",{attrs:{id:"第三轮"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第三轮"}},[e._v("#")]),e._v(" 第三轮：")]),e._v(" "),r("p",[e._v("项⽬部的技术负责⼈或者CTO这类的。")]),e._v(" "),r("p",[e._v("会问你项⽬，各种解决⽅案。")]),e._v(" "),r("h2",{attrs:{id:"第四轮"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第四轮"}},[e._v("#")]),e._v(" 第四轮：")]),e._v(" "),r("p",[e._v("⼀般hr⾯试")]),e._v(" "),r("p",[e._v("会问你⼯作经历")]),e._v(" "),r("p",[e._v("为啥出来看机会")]),e._v(" "),r("p",[e._v("薪资要求")]),e._v(" "),r("p",[e._v("选择我们的原因是啥？ ⼀定要表达出强烈想去他们公司的意图，就是死命舔")]),e._v(" "),r("ul",[r("li",[e._v("最后⼀轮：")])]),e._v(" "),r("p",[e._v("就是给薪资⽅案了。发offffer")]),e._v(" "),r("p",[e._v("发offffer后，就接就⾏，可以后期拒掉。")]),e._v(" "),r("h1",{attrs:{id:"_2-自我介绍"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-自我介绍"}},[e._v("#")]),e._v(" 2.⾃我介绍")]),e._v(" "),r("p",[e._v("每次都会让你做⾃我介绍，可以从下⾯⻆度说")]),e._v(" "),r("p",[e._v("可以从公司是⼲什么的，")]),e._v(" "),r("p",[e._v("你是哪个部⻔的，")]),e._v(" "),r("p",[e._v("你们这个部⻔是做什么的")]),e._v(" "),r("p",[e._v("你负责啥？")]),e._v(" "),r("p",[e._v("擅⻓那些技能")]),e._v(" "),r("p",[e._v("负责过那些业务难或者技术难的业务")]),e._v(" "),r("p",[e._v("你的性格。")]),e._v(" "),r("p",[e._v("平⽇是否爱学习、爱思考")]),e._v(" "),r("p",[e._v("（有证据）")]),e._v(" "),r("p",[e._v("是否有⾃⼰博客、git或者项⽬")]),e._v(" "),r("h1",{attrs:{id:"_3-算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-算法"}},[e._v("#")]),e._v(" 3.算法")]),e._v(" "),r("p",[e._v("⼤⼚⾯试主要喜欢考察动态规划、链表、字符串排序。")]),e._v(" "),r("p",[e._v("难度⼀般简单到中等之间。")]),e._v(" "),r("p",[e._v("代码⾏数在10-30⾏之间(如果解法太⻓的题⽬优先级降低)。")]),e._v(" "),r("h2",{attrs:{id:"_1-1-刷题推荐"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-刷题推荐"}},[e._v("#")]),e._v(" 1.1 刷题推荐")]),e._v(" "),r("ul",[r("li",[e._v("1.⼒扣⽹前100道简单和中等难度的")])]),e._v(" "),r("p",[e._v("​      "),r("a",{attrs:{href:"https://leetcode-cn.com/problemset/all/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problemset/all/"),r("OutboundLink")],1)]),e._v(" "),r("ol",{attrs:{start:"2"}},[r("li",[e._v("⽜客⽹⾼频200道题中的前100道 （前30道简单和中等的必刷）")])]),e._v(" "),r("p",[r("a",{attrs:{href:"https://www.nowcoder.com/ta/job-code-high",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.nowcoder.com/ta/job-code-high"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("⼒扣题解推荐：")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode.wang/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode.wang/"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://labuladong.gitee.io/algo/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://labuladong.gitee.io/algo/"),r("OutboundLink")],1)]),e._v(" "),r("h2",{attrs:{id:"_1-2-突击题目"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-突击题目"}},[e._v("#")]),e._v(" 1.2 突击题⽬")]),e._v(" "),r("h3",{attrs:{id:"_1-数组"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-数组"}},[e._v("#")]),e._v(" 1. 数组")]),e._v(" "),r("ol",[r("li",[e._v("两数之和  "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/two-sum/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/two-sum/"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("盛最多⽔的容器 "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/container-with-most-water/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/container-with-most-water/"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("三数之和 "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/3sum/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/3sum/"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("删除有序数组中的重复项 "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("下⼀个排列 "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/next-permutation/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/next-permutation/"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("搜索旋转排序数组 "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/search-in-rotated-sorted-array",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/search-in-rotated-sorted-arra"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("移动零 "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/move-zeroes/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/move-zeroes/"),r("OutboundLink")],1)])]),e._v(" "),r("h3",{attrs:{id:"_2-链表"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-链表"}},[e._v("#")]),e._v(" 2. 链表")]),e._v(" "),r("ol",{attrs:{start:"2"}},[r("li",[r("p",[e._v("两数相加 "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/add-two-numbers/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/add-two-numbers/"),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("p",[e._v("删除链表的倒数第 N 个结点 "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/ "),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("p",[e._v("合并两个有序链表 "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/merge-two-sorted-lists/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/merge-two-sorted-lists/"),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("p",[e._v("合并K个升序链表 "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/merge-k-sorted-lists/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/merge-k-sorted-lists/"),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("p",[e._v("两两交换链表中的节点 "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/swap-nodes-in-pairs/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/swap-nodes-in-pairs/"),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("p",[e._v("环形链表 "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/linked-list-cycle/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/linked-list-cycle/"),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("p",[e._v("两两交换链表中的节点 "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/linked-list-cycle-ii/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/linked-list-cycle-ii/"),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("p",[e._v("反转链表 "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/reverse-linked-list/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/reverse-linked-list/"),r("OutboundLink")],1)])])]),e._v(" "),r("h3",{attrs:{id:"_3-树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-树"}},[e._v("#")]),e._v(" 3. 树")]),e._v(" "),r("p",[e._v("⼆叉树的前中后遍历 "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-tree-inorder-traversal/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/binary-tree-inorder-traversal/"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("⼆叉树的层序遍历 "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/binary-tree-level-order-traversal/"),r("OutboundLink")],1)]),e._v(" "),r("ol",{attrs:{start:"110"}},[r("li",[r("p",[e._v("平衡⼆叉树 "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/balanced-binary-tree/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/balanced-binary-tree/"),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("p",[e._v("对称⼆叉树 "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/symmetric-tree/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/symmetric-tree/"),r("OutboundLink")],1)])])]),e._v(" "),r("p",[e._v("剑指 Offffer 54. ⼆叉搜索树的第k⼤节点 "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/"),r("OutboundLink")],1)]),e._v(" "),r("h3",{attrs:{id:"_4-动态规划"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-动态规划"}},[e._v("#")]),e._v(" 4. 动态规划")]),e._v(" "),r("ol",{attrs:{start:"42"}},[r("li",[r("p",[e._v("接⾬⽔ "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/trapping-rain-water/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/trapping-rain-water/"),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("p",[e._v("最⼤⼦序和 "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/maximum-subarray/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/maximum-subarray/"),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("p",[e._v("乘积最⼤⼦数组 "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/maximum-product-subarray/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/maximum-product-subarray/"),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("p",[e._v("最⼩路径和 "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/minimum-path-sum/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/minimum-path-sum/"),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("p",[e._v("最⻓递增⼦序列 "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/maximum-product-subarray/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/maximum-product-subarray/"),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("p",[e._v("爬楼梯 "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/climbing-stairs/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/climbing-stairs/"),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("p",[e._v("买卖股票的最佳时机 "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/ "),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("p",[e._v("买卖股票的最佳时机 II "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/"),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("p",[e._v("打家劫舍 "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/house-robber/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/house-robber/"),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("p",[e._v("打家劫舍 II https://leetcode-cn.com/problems/house-robber-ii/https://leetcode-cn.com/problems/house-robber-ii/")])]),e._v(" "),r("li",[r("p",[e._v("打家劫舍 III "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/house-robber-iii/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/house-robber-iii/"),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("p",[e._v("最⻓递增⼦序列"),r("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-increasing-subsequenck/e/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/longest-increasing-subsequenck/e/"),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("p",[e._v("零钱兑换 "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/coin-change/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leetcode-cn.com/problems/coin-change/"),r("OutboundLink")],1)])]),e._v(" "),r("li",[r("p",[e._v("其他")])])]),e._v(" "),r("p",[e._v("排序 "),r("a",{attrs:{href:"https://www.nowcoder.com/practice/2baf799ea0594abd974d37139de27896",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.nowcoder.com/practice/2baf799ea0594abd974d37139de27896"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("设计LRU缓存结构 "),r("a",{attrs:{href:"https://www.nowcoder.com/practice/e3769a5f49894d49b871c09cadd13a61",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.nowcoder.com/practice/e3769a5f49894d49b871c09cadd13a61"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("⼆叉树先序，中序和后序 "),r("a",{attrs:{href:"https://www.nowcoder.com/practice/a9fec6c46a684ad5a3abd4e365a9d362",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.nowcoder.com/practice/a9fec6c46a684ad5a3abd4e365a9d362"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("合并类题⽬：合并有序数组、链表、多个链表或者数组的。并排序")]),e._v(" "),r("p",[e._v("另外必看：冒泡排序和快速排序")]),e._v(" "),r("h1",{attrs:{id:"_4-基础知识"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-基础知识"}},[e._v("#")]),e._v(" 4.基础知识")]),e._v(" "),r("p",[e._v("主要有下⾯⼏⼤块")]),e._v(" "),r("h2",{attrs:{id:"core-java"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#core-java"}},[e._v("#")]),e._v(" core java")]),e._v(" "),r("p",[e._v("重载和重写的区别")]),e._v(" "),r("p",[e._v("接⼝和抽象的区别，项⽬中是怎么⽤的？")]),e._v(" "),r("p",[e._v("Exception和Error")]),e._v(" "),r("p",[e._v("Object类内的⽅法")]),e._v(" "),r("p",[e._v("Boolean占⼏个字节")]),e._v(" "),r("p",[e._v("进程和线程的区别")]),e._v(" "),r("h2",{attrs:{id:"juc-必问"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#juc-必问"}},[e._v("#")]),e._v(" JUC（必问）")]),e._v(" "),r("p",[e._v("必问，⼀般是⼀⾯问的多")]),e._v(" "),r("h3",{attrs:{id:"_1-volatile-的用处和实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-volatile-的用处和实现"}},[e._v("#")]),e._v(" 1. volatile 的⽤处和实现？")]),e._v(" "),r("p",[e._v("保证可⻅性 如何实现？")]),e._v(" "),r("p",[e._v("不保原⼦性 如何实现？")]),e._v(" "),r("p",[e._v("部分保证有序性 如何实现？")]),e._v(" "),r("p",[e._v("lock锁")]),e._v(" "),r("h3",{attrs:{id:"_2-synchronized-重点-必考"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-synchronized-重点-必考"}},[e._v("#")]),e._v(" 2. synchronized（重点，必考）")]),e._v(" "),r("p",[e._v("锁的对象？")]),e._v(" "),r("p",[e._v("java对象头结构")]),e._v(" "),r("p",[e._v("不同java版本对其优化？")]),e._v(" "),r("p",[e._v("⽆锁、偏向锁、轻量级、重量级锁都是怎么晋升的，对象头⾥是怎么变化的")]),e._v(" "),r("p",[e._v("synchronized和Lock的区别（必考）")]),e._v(" "),r("h3",{attrs:{id:"_3-cas"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-cas"}},[e._v("#")]),e._v(" 3. CAS")]),e._v(" "),r("p",[e._v("cas是啥？为啥要有?")]),e._v(" "),r("p",[e._v("底层实现")]),e._v(" "),r("p",[e._v("CAS实现原⼦操作的三⼤问题？解决⽅案")]),e._v(" "),r("p",[e._v("Atomic类如何保证原⼦性（CAS操作）（必考）")]),e._v(" "),r("h3",{attrs:{id:"_4-指令重排序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-指令重排序"}},[e._v("#")]),e._v(" 4. 指令重排序")]),e._v(" "),r("p",[e._v("有哪⼏种（问的不多）")]),e._v(" "),r("h3",{attrs:{id:"_5-线程池-重点-必考"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-线程池-重点-必考"}},[e._v("#")]),e._v(" 5. 线程池（重点，必考）")]),e._v(" "),r("p",[e._v("线程池的7个参数，必须精通其内部含义（必考）")]),e._v(" "),r("p",[e._v("ThreadPoolExecutor的⼯作流程（必考）")]),e._v(" "),r("p",[e._v("线程池的状态⽣命周期，他们是怎么流转的")]),e._v(" "),r("p",[e._v("运⾏(RUNNING) 关机(SHUTDOWN) 停⽌(STOP) 清理(TIDYING)终⽌(TERMINATED)")]),e._v(" "),r("p",[e._v("你们项⽬中怎么⽤的线程池")]),e._v(" "),r("h3",{attrs:{id:"_6-锁"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-锁"}},[e._v("#")]),e._v(" 6. 锁")]),e._v(" "),r("p",[e._v("让你实现⼀个死锁")]),e._v(" "),r("p",[e._v("让你实现⼀个单例，加锁（synchronized和lock 2种版本）")]),e._v(" "),r("p",[e._v("什么是公平锁和⾮公平锁")]),e._v(" "),r("h3",{attrs:{id:"_7-aqs"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-aqs"}},[e._v("#")]),e._v(" 7. AQS")]),e._v(" "),r("p",[e._v("AQS是啥？内部是怎么⼯作的？")]),e._v(" "),r("p",[e._v("让你实现⼀个AQS，你准备怎么设计？")]),e._v(" "),r("p",[e._v("⾥⾯的有⼏个属性，都是什么意思")]),e._v(" "),r("h3",{attrs:{id:"_8-集合重点-重点-必考"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8-集合重点-重点-必考"}},[e._v("#")]),e._v(" 8. 集合重点（重点，必考）")]),e._v(" "),r("ol",[r("li",[r("p",[e._v("HashMap和ConcurrentHashMap区别（必考）")])]),e._v(" "),r("li",[r("p",[e._v("ConcurrentHashMap的数据结构（必考）")])])]),e._v(" "),r("p",[e._v("CopyOnWriteArrayList")]),e._v(" "),r("p",[e._v("底层jdk1.7 1.8 都是怎么实现的 。是⽤锁还是cas。数组和红⿊树的晋升条件")]),e._v(" "),r("h3",{attrs:{id:"_9-threadlocal"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_9-threadlocal"}},[e._v("#")]),e._v(" 9. ThreadLocal")]),e._v(" "),r("p",[e._v("内部结构是啥？原理和实现")]),e._v(" "),r("p",[e._v("什么是内存泄露？产⽣原因、避免措施")]),e._v(" "),r("p",[e._v("你们项⽬是怎么⽤的？")]),e._v(" "),r("p",[e._v("⽗⼦线程传参怎么办？")]),e._v(" "),r("h1",{attrs:{id:"网络"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#网络"}},[e._v("#")]),e._v(" ⽹络")]),e._v(" "),r("p",[e._v("这个版块问的不多")]),e._v(" "),r("h2",{attrs:{id:"基础网络部分"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基础网络部分"}},[e._v("#")]),e._v(" 基础⽹络部分")]),e._v(" "),r("ol",[r("li",[r("p",[e._v("udp和tcp的区别")])]),e._v(" "),r("li",[r("p",[e._v("三次握⼿和四次挥⼿")])]),e._v(" "),r("li",[r("p",[e._v("tcp头的结构")])]),e._v(" "),r("li",[r("p",[e._v("http头的结构")])]),e._v(" "),r("li",[r("p",[e._v("https的接⼝")])]),e._v(" "),r("li",[r("p",[e._v("cdn是什么东⻄。")])]),e._v(" "),r("li",[r("p",[e._v("什么是前后端分离，你们项⽬中怎么实现的。")])]),e._v(" "),r("li",[r("p",[e._v("讲述⼀下⼀次完整的⽹络请求是什么步骤")])])]),e._v(" "),r("h2",{attrs:{id:"io"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#io"}},[e._v("#")]),e._v(" IO")]),e._v(" "),r("p",[e._v("bio nio aio是啥")]),e._v(" "),r("p",[e._v("底层是怎么实现的JVM")]),e._v(" "),r("ol",[r("li",[r("p",[e._v("运⾏时数据区域（内存模型）（必考）堆栈，共有还是私有的")])]),e._v(" "),r("li",[r("p",[e._v("垃圾回收机制（必考）")])]),e._v(" "),r("li",[r("p",[e._v("垃圾回收算法（必考）")])]),e._v(" "),r("li",[r("p",[e._v("各垃圾回收器的特点及区别 CMS或者G1的回收过程，优缺点，会问的⾮常多")])]),e._v(" "),r("li",[r("p",[e._v("类的加载过程")])]),e._v(" "),r("li",[r("p",[e._v("内存泄露了怎么办？你们是怎么解决的")])]),e._v(" "),r("li",[r("p",[e._v("JDBC和双亲委派模型关系，怎么破坏")])]),e._v(" "),r("li",[r("p",[e._v("问⼀些jvm参数 xms或者jstat的⼀些")])])]),e._v(" "),r("h2",{attrs:{id:"spring"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring"}},[e._v("#")]),e._v(" Spring")]),e._v(" "),r("p",[e._v("spring很怪 问的很少，源码也不会问，⼤概率是⾯试官也背不过？ 主要问DI和AOP")]),e._v(" "),r("ol",[r("li",[r("p",[e._v("Spring的IOC/AOP的实现（必考）")])]),e._v(" "),r("li",[r("p",[e._v("动态代理的实现⽅式（必考）")])]),e._v(" "),r("li",[r("p",[e._v("AOP？是啥 底层实现。 cglib的底层实现 （必问题⽬）")])]),e._v(" "),r("li",[r("p",[e._v("Spring如何解决循环依赖（三级缓存）（必考）")])]),e._v(" "),r("li",[r("p",[e._v("Spring的后置处理器")])]),e._v(" "),r("li",[r("p",[e._v("Spring的@Transactional如何实现的（必考）")])]),e._v(" "),r("li",[r("p",[e._v("Spring的事务传播级别")])]),e._v(" "),r("li",[r("p",[e._v("BeanFactory和ApplicationContext的联系和区别")])]),e._v(" "),r("li",[r("p",[e._v("springboot的是怎么⼯作的，和spring的区别")])])]),e._v(" "),r("h2",{attrs:{id:"mysql-必问"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mysql-必问"}},[e._v("#")]),e._v(" Mysql（必问）")]),e._v(" "),r("ol",[r("li",[r("p",[e._v("事务的基本要素")])]),e._v(" "),r("li",[r("p",[e._v("事务隔离级别（必考）")])]),e._v(" "),r("li",[r("p",[e._v("如何解决事务的并发问题(脏读，幻读)（必考）")])]),e._v(" "),r("li",[r("p",[e._v("MVCC多版本并发控制，底层实现。（必考）")])]),e._v(" "),r("li",[r("p",[e._v("binlog,redolog,undolog都是什么，起什么作⽤")])]),e._v(" "),r("li",[r("p",[e._v("给定隔离级别下，加锁的过程，表锁、⾏锁、间隙锁、共享锁、排它锁7. innodb和myisam的区别和优缺点")])]),e._v(" "),r("li",[r("p",[e._v("为什么选择B+树作为索引结构（必考）")])]),e._v(" "),r("li",[r("p",[e._v("索引B+树的叶⼦节点都可以存哪些东⻄（必考）")])]),e._v(" "),r("li",[r("p",[e._v("查询在什么时候不⾛（预期中的）索引（必考）")])]),e._v(" "),r("li",[r("p",[e._v("sql如何优化")])]),e._v(" "),r("li",[r("p",[e._v("sql的执⾏顺序？或者 order by原理")])])]),e._v(" "),r("p",[e._v("13 让你写个sql，⼀般是join⼦查询的居多（必考）")]),e._v(" "),r("h2",{attrs:{id:"redis-必问"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis-必问"}},[e._v("#")]),e._v(" Redis（必问）")]),e._v(" "),r("ol",[r("li",[r("p",[e._v("redis的底层数据结构是啥，晋升条件，最⼤容量是啥是啥。")])]),e._v(" "),r("li",[r("p",[e._v("为啥这么快，应⽤场景")])]),e._v(" "),r("li",[r("p",[e._v("他是单线程的吗？单进程的吗？")])]),e._v(" "),r("li",[r("p",[e._v("Redis的持久化机制 ，参数、流程（必考）")])]),e._v(" "),r("li",[r("p",[e._v("主从同步是怎么做的? 同步失败了怎么办?还是失败怎么办")])]),e._v(" "),r("li",[r("p",[e._v("热点key、⼤key是怎么发现的和解决的")])])]),e._v(" "),r("p",[e._v("7.缓存穿透、缓存击穿、")]),e._v(" "),r("p",[e._v("缓存失效 都是啥")]),e._v(" "),r("ol",{attrs:{start:"8"}},[r("li",[r("p",[e._v("淘汰策略都有啥。内存满了还处理请求吗（必考）")])]),e._v(" "),r("li",[r("p",[e._v("了解bitmap 布隆表达式 lua吗")])])]),e._v(" "),r("p",[e._v("10 分布式锁是怎么实现的？续期和安全性是怎么保证的")]),e._v(" "),r("p",[e._v("11 他和mencache的区别")]),e._v(" "),r("p",[e._v("12 集群或者哨兵模式下是怎么⼯作的")]),e._v(" "),r("p",[e._v("13 怎么保证原⼦性。")]),e._v(" "),r("h2",{attrs:{id:"kafka"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#kafka"}},[e._v("#")]),e._v(" Kafka")]),e._v(" "),r("ol",[r("li",[r("p",[e._v("kafka的整体架构是啥，都有哪些部分促成的，作⽤是啥")])]),e._v(" "),r("li",[r("p",[e._v("怎么保证消息的不丢失。")])]),e._v(" "),r("li",[r("p",[e._v("怎么保证消息的有序性")])]),e._v(" "),r("li",[r("p",[e._v("怎么提⾼kafka的并发，⽣产和消费都说⼀下")])]),e._v(" "),r("li",[r("p",[e._v("为啥kafka这么快")])])]),e._v(" "),r("h1",{attrs:{id:"_5-项目"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-项目"}},[e._v("#")]),e._v(" 5.项⽬")]),e._v(" "),r("h2",{attrs:{id:"_1-项目里职责"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-项目里职责"}},[e._v("#")]),e._v(" 1. 项⽬⾥职责")]),e._v(" "),r("ol",[r("li",[r("p",[e._v("会问你⼀个部⻔有⼏个⼈，组成状态")])]),e._v(" "),r("li",[r("p",[e._v("这个项⽬多少⼈。")])]),e._v(" "),r("li",[r("p",[e._v("这个项⽬你负责了啥，占了啥地位或者⽐重，⼯期啥的")])])]),e._v(" "),r("h2",{attrs:{id:"_2-项目细节"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-项目细节"}},[e._v("#")]),e._v(" 2. 项⽬细节")]),e._v(" "),r("ol",[r("li",[e._v("让你介绍⼀下项⽬整体流程")])]),e._v(" "),r("p",[e._v("⼀定要有套路，先说架构或者整体，再细说细节")]),e._v(" "),r("ol",{attrs:{start:"2"}},[r("li",[e._v("会问你难点和亮点，怎么优化或者解决的")])]),e._v(" "),r("p",[e._v("并发⼤？")]),e._v(" "),r("p",[e._v("技术难度⼤？")]),e._v(" "),r("p",[e._v("bug或者坑太多？")]),e._v(" "),r("p",[e._v("你是怎么发现的或者解")]),e._v(" "),r("p",[e._v("决的？")]),e._v(" "),r("p",[e._v("如果你实际没⽤过，但是知道如果⽤了哪个技术栈会提⾼并发啥的，可以尽管直接说，还可以怎")]),e._v(" "),r("p",[e._v("么怎么优化就⾏。")]),e._v(" "),r("p",[e._v("============")]),e._v(" "),r("p",[e._v("核⼼思路：")]),e._v(" "),r("p",[e._v("⾯试官其实不是想问你项⽬curd，⽽是你在项⽬⾥⾯的亮点和难点")]),e._v(" "),r("p",[e._v("你需要让⾯试官认为你这个项⽬很难，技术挑战很⾼，然后你是怎么克服的。")]),e._v(" "),r("h2",{attrs:{id:"_3-项目实践"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-项目实践"}},[e._v("#")]),e._v(" 3. 项⽬实践")]),e._v(" "),r("p",[e._v("如果你项⽬实在平平⽆奇，那么你可以融⼊下⾯⼏个亮点")]),e._v(" "),r("ol",[r("li",[e._v("分布式ID是啥？")])]),e._v(" "),r("p",[e._v("分布式ID⼀般是解决数据库主键⾃增的。")]),e._v(" "),r("p",[e._v("或者解决异步落库订单重复")]),e._v(" "),r("p",[e._v("雪花ID，redis⾃增，⾃制ID（时间+外键+随机 拼接的），分布式ID中间件（tiID）。")]),e._v(" "),r("p",[e._v("ID单个获取还是分批获取")]),e._v(" "),r("ol",{attrs:{start:"2"}},[r("li",[e._v("分布式事务有哪⼏种？")])]),e._v(" "),r("p",[e._v("你们怎么⽤的,会问你")]),e._v(" "),r("p",[e._v("XA TCC")]),e._v(" "),r("ol",{attrs:{start:"3"}},[r("li",[e._v("分布式锁")])]),e._v(" "),r("p",[e._v("redis锁，zk")]),e._v(" "),r("p",[e._v("是怎么续约的")]),e._v(" "),r("p",[e._v("是怎么保证安全性的")]),e._v(" "),r("p",[e._v("优化点：内存锁+分布式锁，⽤来降低分布式锁的压⼒和竞争。")]),e._v(" "),r("ol",{attrs:{start:"4"}},[r("li",[e._v("限流器都有哪些实现⽅式")])]),e._v(" "),r("p",[e._v("内存 guava的RateLimiter")]),e._v(" "),r("p",[e._v("redis ⾃增ID，或者lua脚本")]),e._v(" "),r("p",[e._v("快速失败还是超时失败")]),e._v(" "),r("p",[e._v("推荐快速")]),e._v(" "),r("ol",{attrs:{start:"5"}},[r("li",[e._v("多级缓存")])]),e._v(" "),r("p",[e._v("内存缓存+外置缓存")]),e._v(" "),r("p",[e._v("内存缓存 ：guavaCache Ehcache Caffffeine")]),e._v(" "),r("p",[e._v("外置缓存：redis memcache")]),e._v(" "),r("p",[e._v("你们缓存是怎么更新的：永不失效，异步加锁更新")]),e._v(" "),r("ol",{attrs:{start:"6"}},[r("li",[e._v("内存泄露怎么解决的。")])]),e._v(" "),r("p",[e._v("线程、cpu、内存多⽅⾯考虑")]),e._v(" "),r("h1",{attrs:{id:"_6-方案规划"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-方案规划"}},[e._v("#")]),e._v(" 6.⽅案规划")]),e._v(" "),r("p",[e._v("⾯试官会给你出各种场景题，有的会给你出智商题.")]),e._v(" "),r("p",[e._v("⽬的是：看看你真没真的⽤过，你的⼯作经验")]),e._v(" "),r("ol",[r("li",[e._v("场景题")])]),e._v(" "),r("h2",{attrs:{id:"_1-查询类问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-查询类问题"}},[e._v("#")]),e._v(" 1. 查询类问题")]),e._v(" "),r("ol",[r("li",[e._v("上N亿个数，找出其中最⼤的或者出现最多的前M个数")])]),e._v(" "),r("p",[e._v("分⽽治之")]),e._v(" "),r("p",[e._v("先将N个数 取hashcode取余 分到多个⽂件中，然后挨个⽂件取最值，然后聚合")]),e._v(" "),r("h2",{attrs:{id:"_2-存储类问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-存储类问题"}},[e._v("#")]),e._v(" 2. 存储类问题")]),e._v(" "),r("ol",[r("li",[e._v("我在群⾥发了⼀条聊天记录，怎么将所有的查看过的⼈记录下来。并且要快速查询。")])]),e._v(" "),r("p",[e._v("有可能群⾥⼈很多，或者群⾥的⼈变动很频繁。")]),e._v(" "),r("p",[e._v("⽅案1：打印log⽇志，导⼊ELK⾥，借助ES的能⼒查询")]),e._v(" "),r("p",[e._v("⽅案2：使⽤redis的set或者map，value就是⽤户id")]),e._v(" "),r("p",[e._v("⽅案3：使⽤bitmap ，如果有500⼈，那么只需要500个位即可。")]),e._v(" "),r("p",[e._v("⽅案4：使⽤布隆表达式，有很⼩概率误判，查询单个可以快速查询，如果多个的话，就从redis")]),e._v(" "),r("p",[e._v("拿下来，⾃⼰在内存遍历⼀遍即可。")]),e._v(" "),r("h2",{attrs:{id:"_3-并发类问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-并发类问题"}},[e._v("#")]),e._v(" 3. 并发类问题")]),e._v(" "),r("ol",[r("li",[r("p",[e._v("⾼并发系统的限流如何实现")])]),e._v(" "),r("li",[r("p",[e._v("⾼并发秒杀系统的设计")])]),e._v(" "),r("li",[r("p",[e._v("负载均衡如何设计")])]),e._v(" "),r("li",[r("p",[e._v("智商类问题")])])]),e._v(" "),r("p",[e._v("就是⼀些类似于数学类的概率或者脑筋急转弯问题。")]),e._v(" "),r("p",[e._v("⽅案：不要急，⾃⼰⽤⼏个简单的数模拟⼀下，应该能答上来。⾃⼰能否答上来就看运⽓。")]),e._v(" "),r("p",[e._v("⽐如：")]),e._v(" "),r("p",[e._v("【数学题】随机在⼀个¬圆周上选择三个点，构成锐⻆三⻆形的概率；算法题：在⼀堆数⾥找⼀个⽅法随机选择⼀个最⼤的数；")]),e._v(" "),r("p",[e._v("⼀⼤堆⿊兔⼦还有⼀些⽩兔⼦，所有的⿊兔⼦都喜欢⽩兔⼦，⽩兔⼦不喜欢任何⼀只兔⼦，⿊兔")]),e._v(" "),r("p",[e._v("⼦之间可能喜欢可能不喜欢，给了⼀个函数，⾥⾯有2个参数，A和B，这个函数能判断A是不是")]),e._v(" "),r("p",[e._v("喜欢B；让你设计⼀个算法，最快找出喜欢的兔⼦；")]),e._v(" "),r("p",[e._v("有⼀个整形数组，⻓度是N，然后取值范围是1~N，数组⾥的原数有的出现1次，有的出现2次，")]),e._v(" "),r("p",[e._v("让你设计⼀个算法找出出现2次的；后来⼜改成了有的出现1次，有的出现2次，有的出现3次，")]),e._v(" "),r("p",[e._v("让设计⼀个算法找出出现2次的原数。")]),e._v(" "),r("h1",{attrs:{id:"_7-面试结束提问"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-面试结束提问"}},[e._v("#")]),e._v(" 7.⾯试结束提问")])])}),[],!1,null,null,null);t.default=v.exports}}]);